{"version":3,"sources":["components/UserInput.js","components/MorseCode.js","App.js","index.js"],"names":["UserText","userInput","changeUserInput","convertedInput","codedInput","internationalMorseAlphabet","a","b","c","d","e","f","g","h","i","j","k","l","m","n","o","p","q","r","s","t","u","v","w","x","y","z","0","1","2","3","4","5","6","7","8","9","$","className","onSubmit","preventDefault","codedString","letter","type","value","onChange","target","toLowerCase","onClick","MorseCode","console","log","App","useState","setUserInput","setCodedInput","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"0NAkGeA,MA/Ff,YAA+E,IAA3DC,EAA0D,EAA1DA,UAAWC,EAA+C,EAA/CA,gBAA6BC,GAAkB,EAA9BC,WAA8B,EAAlBD,gBAEpDE,EAA6B,CACjCC,EAAG,KACHC,EAAG,OACHC,EAAG,OACHC,EAAG,MACHC,EAAG,IACHC,EAAG,OACHC,EAAG,MACHC,EAAG,OACHC,EAAG,KACHC,EAAG,OACHC,EAAG,MACHC,EAAG,OACHC,EAAG,KACHC,EAAG,KACHC,EAAG,MACHC,EAAG,OACHC,EAAG,OACHC,EAAG,MACHC,EAAG,MACHC,EAAG,IACHC,EAAG,MACHC,EAAG,OACHC,EAAG,MACHC,EAAG,OACHC,EAAG,OACHC,EAAG,OACHC,EAAG,QACHC,EAAG,QACHC,EAAG,QACHC,EAAG,QACHC,EAAG,QACHC,EAAG,QACHC,EAAG,QACHC,EAAG,QACHC,EAAG,QACHC,EAAG,QACH,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,SACL,IAAK,QACL,IAAK,SACL,IAAK,QACL,IAAK,SACL,IAAK,SACL,IAAK,QACL,IAAK,QACLC,EAAG,UACH,IAAK,SACL,IAAK,QACL,IAAK,KA0BP,OACE,uBAAMC,UAAU,aAAaC,SAlB/B,SAAkBlC,GAEhBA,EAAEmC,iBAGF,IALmB,EAKfC,EAAc,GALC,cAMA7C,GANA,IAMnB,2BAA8B,CAAC,IAAtB8C,EAAqB,QAC5BD,GAAe,IAAMzC,EAA2B0C,IAP/B,8BAUnB5C,EAAe2C,IAQf,UACE,0BACEE,KAAK,OACLL,UAAU,WACVM,MAAOhD,EACPiD,SA7BN,SAAsBxC,GACpBR,EAAgBQ,EAAEyC,OAAOF,MAAMG,kBA8B7B,uBAAOJ,KAAK,SAASC,MAAM,YAC3B,wBAAQI,QAbZ,WACEnD,EAAgB,KAYd,4BCrFSoD,MALf,YAAwC,IAAnBnD,EAAkB,EAAlBA,eAEnB,OADAoD,QAAQC,IAAIrD,GACL,qBAAKwC,UAAU,SAAf,SAAyBxC,KCiDnBsD,MA/Cf,WAEE,MAAkCC,mBAAS,IAA3C,mBAAOzD,EAAP,KAAkB0D,EAAlB,KACA,EAAoCD,mBAAS,IAA7C,mBAAOtD,EAAP,KAAmBwD,EAAnB,KAUA,OACE,sBAAKjB,UAAU,MAAf,UACE,wBAAQA,UAAU,aAAlB,SACE,wDAEF,gCACE,uBACA,uCACA,uKAIA,kIAIA,uFACA,kFAEF,0BAASA,UAAU,sBAAnB,UAEE,cAAC,EAAD,CACE1C,UAAWA,EACXC,gBA/BmB,SAAC+C,GAC1BU,EAAaV,IA+BP7C,WAAYA,EACZD,eA9Be,SAAC8C,GACtBW,EAAcX,GACdM,QAAQC,IAAIP,MA+BR,cAAC,EAAD,CAAW9C,eAAgBC,W,MC1CnCyD,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.4e0653ce.chunk.js","sourcesContent":["// import React and useState from React >>\nimport React from \"react\";\n\nfunction UserText({ userInput, changeUserInput, codedInput, convertedInput }) {\n  // morse alphabet table >>\n  const internationalMorseAlphabet = {\n    a: \".-\",\n    b: \"-...\",\n    c: \"-.-.\",\n    d: \"-..\",\n    e: \".\",\n    f: \"..-.\",\n    g: \"--.\",\n    h: \"....\",\n    i: \"..\",\n    j: \".---\",\n    k: \"-.-\",\n    l: \".-..\",\n    m: \"--\",\n    n: \"-.\",\n    o: \"---\",\n    p: \".--.\",\n    q: \"--.-\",\n    r: \".-.\",\n    s: \"...\",\n    t: \"-\",\n    u: \"..-\",\n    v: \"...-\",\n    w: \".--\",\n    x: \"-..-\",\n    y: \"-.--\",\n    z: \"--..\",\n    0: \"-----\",\n    1: \".----\",\n    2: \"..---\",\n    3: \"...--\",\n    4: \"....-\",\n    5: \".....\",\n    6: \"-....\",\n    7: \"--...\",\n    8: \"---..\",\n    9: \"----.\",\n    \".\": \"......\",\n    \",\": \".-.-.-\",\n    \";\": \"-.-.-.\",\n    \":\": \"---...\",\n    \"?\": \"..--..\",\n    \"!\": \"--..--\",\n    \"(\": \"-.--.\",\n    \")\": \"-.--.-\",\n    \"/\": \"-..-.\",\n    \"-\": \"-....-\",\n    \"@\": \".--.-.\",\n    \"=\": \"-...-\",\n    \"+\": \".-.-.\",\n    $: \"...-..-\",\n    \"'\": \".----.\",\n    \"&\": \".-...\",\n    \" \": \"/\",\n  };\n  // attach userInput to useState and convert it to lower case\n  function inputChanges(e) {\n    changeUserInput(e.target.value.toLowerCase());\n    //  console.log(internationalMorseAlphabet[e.target.value]);\n  }\n\n  // what should happen on submit >>\n  function OnSubmit(e) {\n    // prevent default of form >>\n    e.preventDefault();\n\n    // convert text into code using the morse code object >>\n    let codedString = \"\";\n    for (let letter of userInput) {\n      codedString += \" \" + internationalMorseAlphabet[letter];\n    }\n    // send converted text to parent >>\n    convertedInput(codedString);\n  }\n  // reset userInput to blank on click of button>>\n  function clearInput() {\n    changeUserInput(\"\");\n  }\n\n  return (\n    <form className=\"input-form\" onSubmit={OnSubmit}>\n      <textarea\n        type=\"text\"\n        className=\"textarea\"\n        value={userInput}\n        onChange={inputChanges}\n      ></textarea>\n      <input type=\"submit\" value=\"Convert\" />\n      <button onClick={clearInput}>Clear Text</button>\n    </form>\n  );\n}\n\nexport default UserText;\n\n// string to lower case, to array\n// loop through table, find match with input array\n// put value of key into new array, join(\" \")\n// send conversion result into props?\n\n// check if has paragraphs, make user write it as a symbol?\n// put paragraphs into element with ASCII?\n// OR only check line by line of userinput...?\n","// import useState from React >>\nimport React from \"react\";\n\nfunction MorseCode({ convertedInput }) {\n  console.log(convertedInput);\n  return <div className=\"result\">{convertedInput}</div>;\n}\n\nexport default MorseCode;\n","// import React and useState from React >>\nimport React, { useState } from \"react\";\n// importing user input >>\nimport UserText from \"./components/UserInput\";\n// importing converted morse code >>\nimport MorseCode from \"./components/MorseCode\";\n\nfunction App() {\n  // initialize useState with userInput >>\n  const [userInput, setUserInput] = useState(\"\");\n  const [codedInput, setCodedInput] = useState(\"\");\n\n  const changeUserInputApp = (value) => {\n    setUserInput(value);\n  };\n  const convertedInput = (value) => {\n    setCodedInput(value);\n    console.log(value);\n  };\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <h1>Morse Code Converter</h1>\n      </header>\n      <div>\n        <h3></h3>\n        <h3>Rules</h3>\n        <p>\n          Characters allowed: standard English alphabet, number digits, special\n          characters: @ $ &, punctuation: . , ; : ? ! () / - = + ' [space]\n        </p>\n        <p>\n          Type in the text that you would like to convert into the text box\n          below and then click \"Convert\".\n        </p>\n        <p>You can empty the textbox by clicking on \"Clear Text\".</p>\n        <p>Spaces are converted to '/' in the morse code.</p>\n      </div>\n      <section className=\"converter-container\">\n        {/* user input text to convert >> */}\n        <UserText\n          userInput={userInput}\n          changeUserInput={changeUserInputApp}\n          codedInput={codedInput}\n          convertedInput={convertedInput}\n        />\n        {/* converted text to be displayed >> */}\n        <MorseCode convertedInput={codedInput} />\n      </section>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nimport \"./scss/main.scss\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}